var map = L.map('map').setView([30.3165, 78.0322], 13);

// Add OpenStreetMap tile layer
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; OpenStreetMap contributors'
}).addTo(map);

var currentRoute = null;  // To store the current route
var markers = [];  // To store the markers

// Function to geocode a location and get coordinates
function geocodeLocation(location, callback) {
    fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(location)}`)
        .then(response => response.json())
        .then(data => {
            if (data.length > 0) {
                var latLng = [data[0].lat, data[0].lon];
                callback(latLng);
            } else {
                alert("Location not found!");
            }
        })
        .catch(error => {
            console.error("Error fetching location:", error);
            alert("There was an error while searching for the location. Please try again later.");
        });
}

// Function to get the user's current location
function getCurrentLocation() {
    return new Promise((resolve, reject) => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function(position) {
                    var lat = position.coords.latitude;
                    var lon = position.coords.longitude;
                    resolve([lat, lon]);
                },
                function(error) {
                    console.error("Geolocation error:", error);
                    switch (error.code) {
                        case error.PERMISSION_DENIED:
                            reject("User denied the request for Geolocation.");
                            break;
                        case error.POSITION_UNAVAILABLE:
                            reject("Location information is unavailable.");
                            break;
                        case error.TIMEOUT:
                            reject("The request to get user location timed out.");
                            break;
                        default:
                            reject("An unknown error occurred.");
                            break;
                    }
                }
            );
        } else {
            reject("Geolocation is not supported by this browser.");
        }
    });
}

// Function to show loading indicator
function showLoading() {
    document.getElementById('loading').style.display = 'block';
}

// Function to hide loading indicator
function hideLoading() {
    document.getElementById('loading').style.display = 'none';
}

// Function to find and display the route
function findRoute() {
    var endLocation = document.getElementById('end-location').value.trim();

    if (endLocation) {
        showLoading(); // Show loading indicator

        // Get the user's current location
        getCurrentLocation()
            .then(function(startLatLng) {
                // Geocode the destination location
                geocodeLocation(endLocation, function(endLatLng) {
                    // Remove previous route and markers
                    if (currentRoute) {
                        currentRoute.remove();  // Remove the previous route
                    }
                    markers.forEach(marker => map.removeLayer(marker));  // Remove the previous markers
                    markers = [];  // Clear the marker array

                    // Add a marker for the user's location
                    var startMarker = L.marker(startLatLng).addTo(map).bindPopup("You are here").openPopup();
                    markers.push(startMarker);

                    // Add a marker for the destination location
                    var endMarker = L.marker(endLatLng).addTo(map).bindPopup("Destination: " + endLocation).openPopup();
                    markers.push(endMarker);

                    // Create the route using Leaflet Routing Machine
                    currentRoute = L.Routing.control({
                        waypoints: [
                            L.latLng(startLatLng),
                            L.latLng(endLatLng)
                        ],
                        routeWhileDragging: true
                    }).addTo(map);

                    // Ensure map adjusts to show both markers and route
                    map.fitBounds(L.latLngBounds([startLatLng, endLatLng]));

                    // Hide loading indicator after route is created
                    hideLoading();
                });
            })
            .catch(function(error) {
                hideLoading(); // Hide loading indicator on error
                alert(error); // Display detailed error message
            });
    } else {
        alert('Please enter a destination location!');
    }
}

// Function to clear the route and markers
function clearRoute() {
    if (currentRoute) {
        currentRoute.remove();  // Remove the route
    }
    markers.forEach(marker => map.removeLayer(marker));  // Remove markers
    markers = [];  // Clear the markers array
    document.getElementById('end-location').value = '';  // Clear the input field
}

// Add geocoder control to the map
L.Control.geocoder().addTo(map);



---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Route Search with Live Location</title>

    <!-- Your custom stylesheets -->
    <link rel="stylesheet" href="static/styles.css" />
    <link rel="stylesheet" href="{{ url_for('static', filename='css/live_map.css') }}">

    <!-- Leaflet and other map-related stylesheets -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
    <link rel="stylesheet" href="{{ url_for('static', filename='css/dijpart.css') }}">

</head>

<body>
    <div id="particles-js"></div>
    <h1>Find Route from Your Current Location to a Destination</h1>
    
    <!-- Map container -->
    <div id="map"></div>

    <!-- Input for destination location and buttons -->
    <div class="route-input-container">
        <input type="text" id="end-location" placeholder="Enter destination location" />
        <button onclick="findRoute()">Find Route</button>
        <button onclick="clearRoute()">Clear Route</button>
    </div>

    <!-- Loading indicator -->
    <div id="loading" style="display: none;">Loading...</div>

    <!-- Link to Leaflet and other scripts -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>

    <!-- Link to external JavaScript file -->
    <script src="static/js/map.js"></script>

    
      <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>

  <!-- Particles Initialization -->
   <script src="static/js/dijpart.js"></script>

</body>
</html>


-
/* General Styling */
body {
    font-family: 'Poppins', Arial, sans-serif;
    background: linear-gradient(to right, #f0f0f0, #e6f7ff);
    margin: 0;
    padding: 50px;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
}

/* Heading */
h1 {
    color: #2E8B57;
    font-size: 32px;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 3px;
    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);
    margin-bottom: 25px;
}

/* Map Container Styling */
#map {
    height: 500px;
    width: 100%;  /* Make map take full width */
    max-width: 100vw;  /* Allow map to extend to full width of viewport */
    margin-top: 20px;
    border-radius: 10px;
    box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.1); /* Subtle shadow */
    display: block;
}

/* Form Styling */
.route-input-container {
    background: white;
    padding: 25px 30px;
    border-radius: 12px;
    box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.15);
    display: inline-block;
    width: 90%;
    max-width: 600px;
    margin-top: 20px;
}

/* Labels */
label {
    font-weight: bold;
    color: #444;
    font-size: 16px;
    display: block;
    margin-top: 12px;
}

/* Input Fields */
input[type="text"] {
    width: 90%;
    padding: 12px;
    margin: 8px 0;
    border: 2px solid #2E8B57;
    border-radius: 8px;
    font-size: 16px;
    background: #f9f9f9;
    outline: none;
    transition: all 0.3s ease-in-out;
}

input[type="text"]:focus {
    background: #fff;
    border-color: #3CB371;
    box-shadow: 0px 3px 10px rgba(46, 139, 87, 0.3);
}

/* Submit Button */
button {
    padding: 12px 20px;
    background: linear-gradient(135deg, #2E8B57, #3CB371);
    color: white;
    font-size: 18px;
    font-weight: bold;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    margin-top: 15px;
    transition: all 0.3s ease-in-out;
}

button:hover {
    background: linear-gradient(135deg, #3CB371, #2E8B57);
    transform: translateY(-3px);
    box-shadow: 0px 6px 12px rgba(46, 139, 87, 0.3);
}

/* Paragraph Text */
p {
    font-size: 18px;
    color: #555;
    margin-top: 20px;
    line-height: 1.6;
    font-weight: 500;
}

/* Result Card */
.result-container {
    background: white;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.15);
    display: inline-block;
    text-align: center;
    max-width: 500px;
    margin-top: 20px;
}

/* Button Styling */
.button {
    display: inline-block;
    padding: 12px 20px;
    font-size: 16px;
    font-weight: bold;
    color: white;
    background: linear-gradient(135deg, #2E8B57, #3CB371);
    border-radius: 8px;
    text-decoration: none;
    transition: all 0.3s ease-in-out;
}

.button:hover {
    background: linear-gradient(135deg, #3CB371, #2E8B57);
    transform: translateY(-3px);
    box-shadow: 0px 6px 12px rgba(46, 139, 87, 0.3);
}
